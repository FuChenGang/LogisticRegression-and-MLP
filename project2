import numpy as np
import math
class MLP:
    w = None
    target_type = None
    learning_rate = 0

    hidden_layer_number = None
    the_number_of_units_in_each_layer = None
    

    f = lambda y:  1/(1+np.exp(-y))#sigmod激活函数
    g = lambda x: np.exp(x)/np.square(1+np.exp(-x))#sigmod导数
    


    def __init__(self,hidden_layer_number,the_number_of_units_in_each_layer,feature_number,learning_rate):
        self.hidden_layer_number = hidden_layer_number
        self.the_number_of_units_in_each_layer = the_number_of_units_in_each_layer
        self.learning_rate = learning_rate
        #k = len(x[0])#k为x的feature数
        self.w = []
        a = 0
        while a < hidden_layer_number:
            units_number = the_number_of_units_in_each_layer[a]
            
            if a == 0:
                w_matrix = np.zeros([feature_number+1,units_number])#初始化学习参数为0
                self.w.append(w_matrix)
            else:
                units_number2 = the_number_of_units_in_each_layer[a-1]
                w_matrix = np.zeros([units_number2 + 1,units_number])#初始化学习参数为0
                self.w.append(w_matrix)
            a = a + 1
        #初始化学习参数为0:输出层
        if hidden_layer_number == 0:
            w_matrix = np.zeros(feature_number + 1)
            self.w.append(w_matrix)
        else:
            w_matrix = np.zeros(hidden_layer_number[-1] + 1)
            self.w.append(w_matrix)

        
        


    def data_proccessed_x(self,x):
    #将矩阵x拓展一列用来乘偏置项w0并返回处理后的矩阵
        a = x.shape
        x_proccessed = np.ones([a[0],a[1]+1])
        x_proccessed[:,1:] = x
        return x_proccessed

    def data_proccessed_target(self,target):
        target_type = set()
        for i in target:
            target_type.add(i)
        target_type = list(target_type)
        self.target_type = target_type#记录

    # def hidden_layer(self,x,w_matrix):#激活函数为sigmod函数的隐藏层
    #     x = self.data_proccessed_x(x)

    
    

    def train_output_layer(self,x,t):#输出层
        self.data_proccessed_target(t)
        loss = math.inf
        terminate = 0
        x = self.data_proccessed_x(x)
        derivative = np.zeros([len(self.w[-1])])
        while loss > 0.05:#训练继续进行的条件
            
            
            z_matrix = self.w[-1].dot(x.T)
            z_matrix = z_matrix.T#转置 
            y = 1/(1+np.exp(-z_matrix))
            
            print('\nz_matrix:',z_matrix)
            print('np.exp(-z_matrix):',np.exp(-z_matrix))
            
            loss = self.loss(y,t)

            print(f"\nloss{terminate}:",loss)
            k = 0
            print('np.sum((-y + t)* x[:0]):',np.sum((-y + t)* x[:,0]))
            while k < len(self.w[-1]):
                    #derivative_matrix[k][i] = np.sum((y[:,k]-self.target_proccessed[:,k])* x_matrix[:,i]) +  self.w[-1][k][i]#正则项
                regulazation = 10000*self.w[-1][k]
                derivative[k] = np.sum(((y-1) + t)* x[:,k])   + regulazation#正则化
                k = k + 1
            #参数更新：
            self.w[-1] = self.w[-1] - self.learning_rate * derivative
            terminate = terminate + 1
            print("迭代次数:",terminate)
            if terminate >= 200:#最大训练次数
                return 
    
    def loss(self,y,t):
        print('\ny:',y)
        loss = -np.sum(t * np.log(1-y))/len(y)-np.sum((1-t) * np.log(y))/len(y)
        print("loss:::::",loss)
        return loss
    


    def predict(self,x):
        x_matrix = self.data_proccessed_x(x)
        z_matrix = self.w[-1].dot(x_matrix.T)
        y = 1/(1+np.exp(-z_matrix))#指数处理
        output = []
        for i in y:
            if i >= 0.5:
                output.append(self.target_type[0])
            else:
                output.append(self.target_type[1])
        return output
            

        
    


filepath = "C:\\Users\\86136\\Desktop\\杂物\\人工智能与机器学习\\作业\\作业8\\optdigits.tra"
data = np.loadtxt(filepath,dtype = int,delimiter=',')
x = data[:,0:-1]
target = data[:,-1]
a = 0
for i in target:
    if i < 5 :
        target[a] = 0
    else:
        target[a] = 1
    a = a + 1
MLP = MLP(0,[],64,0.0000002)

MLP.train_output_layer(x,target)

y = MLP.predict(x)
print("训练集的预测值：\n",y)
a = y - target
wrong_number = np.sum(np.absolute(a))
print("训练集的错误个数:",wrong_number)
print("对于训练集的预测准确率：",(len(target)-wrong_number) / len(target))

# filepath2 = "C:\\Users\\86136\\Desktop\\杂物\\人工智能与机器学习\\作业\\作业8\\optdigits.tes"
# data = np.loadtxt(filepath2,dtype = int,delimiter=',')
# x = data[:,0:-1]
# target = data[:,-1]
# a = 0
# for i in target:
#     if i < 5 :
#         target[a] = 0
#     else:
#         target[a] = 1
#     a = a + 1
# y = MLP.predict(x)
# print("测试集的预测值：\n",y)
# a = y - target
# wrong_number = np.sum(np.absolute(a))
# print("测试集的错误个数:",wrong_number)
# print("对于测试集的预测准确率：",(len(target)-wrong_number) / len(target))